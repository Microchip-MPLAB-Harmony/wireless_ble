/*******************************************************************************
* Copyright (C) 2022 Microchip Technology Inc. and its subsidiaries.
*
* Subject to your compliance with these terms, you may use Microchip software
* and any derivatives exclusively with Microchip products. It is your
* responsibility to comply with third party license terms applicable to your
* use of third party software (including open source software) that may
* accompany Microchip software.
*
* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
* EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
* WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
* PARTICULAR PURPOSE.
*
* IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
* BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
* FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
* ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
* THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.j
*******************************************************************************/

/*******************************************************************************
  Stack Manager Header File

  Company:
    Microchip Technology Inc.

  File Name:
    stack_mgr.h

  Summary:
    Defines the interface for the BLE Stack management functions used by the application.

  Description:
    This header file provides declarations for BLE Stack management functions and
    event handling mechanisms. Applications should invoke "STACK_EventRegister" during
    the "APP_Initialize" phase to ensure they are subscribed to receive BLE-related
    events and can respond to them appropriately.
 *******************************************************************************/
#ifndef STACK_MGR_H
#define STACK_MGR_H

// DOM-IGNORE-BEGIN
#ifdef __cplusplus  // Provide C++ Compatibility
extern "C" {
#endif
// DOM-IGNORE-END

/**
 * @defgroup STACK_MGR STACK
 * @brief Defines the interface for the STACK functions provided by the BLE Library.
 * @{
 */

// *****************************************************************************
// *****************************************************************************
// Section: Macros
// *****************************************************************************
// *****************************************************************************

/**
 * @addtogroup STACK_ENUMS Enumerations
 * @{
 */

/** @brief Enumerates the group IDs for different stack components. */
typedef enum STACK_GroupId_T{
    STACK_GRP_NONE = 0U,                    /**< Identifier for no group. */
    STACK_GRP_BLE_GAP,                      /**< Identifier for the BLE Generic Access Profile (GAP) group. */
    STACK_GRP_BLE_L2CAP,                    /**< Identifier for the BLE Logical Link Control and Adaptation Protocol (L2CAP) group. */
    STACK_GRP_BLE_SMP,                      /**< Identifier for the BLE Security Manager Protocol (SMP) group. */
    STACK_GRP_GATT,                         /**< Identifier for the Generic Attribute Profile (GATT) group. */

    STACK_GRP_END                           /**< Sentinel value indicating the end of the group identifiers. */
}STACK_GroupId_T;

/** @} */ //STACK_ENUMS
// *****************************************************************************
// *****************************************************************************
// Section: Data Types
// *****************************************************************************
// *****************************************************************************
/**
 * @addtogroup STACK_STRUCTS Structures
 * @{
 */
 
/** @brief Structure representing an event generated by the STACK. */
typedef struct STACK_Event_T
{
    STACK_GroupId_T     groupId;                    /**< Identifier for the group to which the event belongs. 
                                                          Refer to @ref STACK_GroupId_T for possible values. */
    uint16_t            evtLen;                     /**< The length of the event data in bytes. */
    uint8_t             *p_event;                   /**< A pointer to the event data. This is the actual information 
                                                            related to the event that occurred within the STACK. */
} STACK_Event_T;


/**
 * @brief Defines the prototype for the STACK event callback function.
 * @note  Applications must implement this callback function in order to receive events 
 *        from the STACK.The STACK calls this function and provides a pointer to an event 
 *        structure containing details about the event that has occurred.
 * 
 * @param p_event           Pointer to the @ref STACK_Event_T structure containing the event details.
 */
typedef void (*STACK_EventCb_T)(STACK_Event_T *p_event);

/**@} */ //STACK_STRUCTS

// *****************************************************************************
// *****************************************************************************
// Section: Function Prototypes
// *****************************************************************************
// *****************************************************************************
/**
 * @addtogroup STACK_FUNS Functions
 * @{
 */
 

/**
 * @brief Registers a callback function for STACK events.
 * @note  This function allows application to register a callback that will be invoked 
 *        when a STACK event occurred. The application-provided callback function must 
 *        conform to the @ref STACK_EventCb_T function signature.
 * 
 * @param[in] eventCb        The callback function provided by the application that will be called upon a STACK event. 
 *                           This function should handle the event appropriately. See @ref STACK_EventCb_T.
 *
 */
void STACK_EventRegister(STACK_EventCb_T eventCb);

/** @} */ //STACK_FUNS

/** @} */

//DOM-IGNORE-BEGIN
#ifdef __cplusplus
}
#endif
//DOM-IGNORE-END

#endif//STACK_MGR_H